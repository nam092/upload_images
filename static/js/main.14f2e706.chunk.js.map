{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onChangeFile","e","_loop","i","reader","FileReader","readAsDataURL","target","files","onload","setState","images","state","concat","result","length","_onDelete","index","arr","filter","ob","file","_React$createElement","_this2","renderImages","map","img","react_default","a","createElement","className","src","class","alt","key","onClick","type","name","multiple","defineProperty","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA6DeA,qBAxDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,cAAgB,SAACC,GACf,IADqB,IAAAC,EAAA,SACZC,GACP,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,cAAcL,EAAEM,OAAOC,MAAML,IACpCC,EAAOK,OAAS,WACdhB,EAAKiB,SAAS,CACZC,OAAQlB,EAAKmB,MAAMD,OAAOE,OAAOT,EAAOU,YALrCX,EAAI,EAAGA,EAAIF,EAAEM,OAAOC,MAAMO,OAAQZ,IAAKD,EAAvCC,IATQV,EAqBnBuB,UAAU,SAACC,GAGL,IAAMC,EAAMzB,EAAKmB,MAAMD,OAAOQ,OAAO,SAACC,EAAGjB,GAAJ,OAASA,IAAIc,IAClDxB,EAAKiB,SAAS,CACZC,OAASO,KAxBfzB,EAAKmB,MAAQ,CACXS,KAAM,GACNV,OAAQ,IAJOlB,wEA+BV,IAAA6B,EAAAC,EAAA3B,KACD4B,EAAe5B,KAAKgB,MAAMD,OAAOc,IAAI,SAACC,EAAKT,GAC/C,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAKM,MAAM,YAAYC,IAAI,GAAGH,UAAU,oBAClDH,EAAAC,EAAAC,cAAA,UAAQK,IAAKjB,EAAOkB,QAAS,kBAAIZ,EAAKP,UAAUC,KAAhD,QAKN,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SAAAP,EAAA,CAAOc,KAAK,OAAOC,KAAK,GAAGC,UAAQ,GAAnC5C,OAAA6C,EAAA,EAAA7C,CAAA4B,EAAA,OAAyC,WAAzC5B,OAAA6C,EAAA,EAAA7C,CAAA4B,EAAA,WAA6D1B,KAAKI,eAAlEsB,IACAK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAETN,WA/CIgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.14f2e706.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      file: '',\n      images: []\n    }\n  }\n\n  _onChangeFile = (e) => {\n    for (let i = 0; i < e.target.files.length; i++) {\n      let reader = new FileReader();\n      reader.readAsDataURL(e.target.files[i]);\n      reader.onload = () => {\n        this.setState({\n          images: this.state.images.concat(reader.result)\n        })\n      }\n    }\n\n  }\n\n  _onDelete=(index)=>{\n \n\n        const arr = this.state.images.filter((ob,i)=> i!==index);\n        this.setState({\n          images : arr\n        })\n  \n  }\n\n  render() {\n    const renderImages = this.state.images.map((img, index) => {\n      return (\n        <div className=\"wrapper-image\">\n          <img src={img} class=\"img-fluid\" alt=\"\" className=\"w3-animate-zoom\" />\n          <button key={index} onClick={()=>this._onDelete(index)}>x</button>\n        </div>\n\n      );\n    })\n    return (\n      <div className=\"App\">\n        <input type=\"file\" name=\"\" multiple name=\"files[]\" onChange={this._onChangeFile} />\n        <div className=\"wrapper\" >\n            {\n              renderImages\n            }\n\n        </div>\n       \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}